1. Speed optimization using Cython
a) Built file attached to this repo.
b) Running rbf.py first with the built-in timer yields a large difference where the naive Python way takes 5.07062196731567 s and
the Scipy version takes 0.08762192726135254 s. This is an order of magnitude difference between the two implementations.  
c) Running kernprof and checking with line_profiler we can see that a large amount of time is spent in the inner for-loop
in the naive implementation. The second largest percentage time spent is the assigning of the array r in the inner most for-loop where
two arrays are accessed at the same time. The third largest percentag time spent is the assignment of the array Y in the second for-loop. 
Therefore, it seems reasonable that if we can use C data types, these bottlenecks will be removed. 
d) After cythonizing rbf.py and timing several runs we can see that the Cython code is faster than the naive Python code.
However, it is still significantly slower than the Scipy implementation. For the effort, it is much better to use the Scipy implementation
instead. The last timings are:
Python -> 4.846187114715576 s
Cython -> 3.8426871299743652 s
Scipy  -> 0.060041189193725586 s
Since Python for-loops are slow, the next step would be to replace those with C for-loops doing 
something similar in: https://docs.python.org/2/extending/extending.html

2. MPI parallelization
a) See attached script in repo.  
b) See attached script in repo.

3. Plotting with matplotlib
See attached jupyter notebook.

4. Testing code with py.test
Added a simple_square function and changed the existing simple_div function to do both floating-point "/" and integer "//" division. 
	
5. Documenting code
a) See attached file in repo.
b) See attached file in repo. 
